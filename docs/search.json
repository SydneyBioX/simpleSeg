[{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"","code":"# Install the package from Bioconductor if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"simpleSeg\")"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"simpleSeg package extends existing bioconductor packages cytomapper EBImage providing structured pipeline creating segmentation masks multiplexed cellular images form tiff stacks. allows single cell information images extracted R, without need external segmentation programs. simpleSeg also facilitates normalisation cellular features features extracted image, priming cells classification / clustering. functions leverage functionality EBImage package Bioconductor. flexibility performing segmentation R recommend learning use EBimage package. key strength simpleSeg coded multiple ways perform simple segmentation operations well incorporating multiple automatic procedures optimise key parameters aren’t specified.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"load-example-data","dir":"Articles","previous_headings":"","what":"Load example data","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"following reanalyse two MIBI-TOF images (Risom et al., 2022) profiling spatial landscape ductal carcinoma situ (DCIS), pre-invasive lesion thought precursor invasive breast cancer (IBC). images stored “extdata” folder package. path folder identified, can read images R using readImage EBImage store CytoImageList using cytomapper package.","code":"# Get path to image directory pathToImages <- system.file(\"extdata\", package = \"simpleSeg\")  # Get directories of images  imageDirs <- dir(pathToImages, \"Point\", full.names = TRUE) names(imageDirs) <- dir(pathToImages, \"Point\", full.names = FALSE)      # Get files in each directory files <- files <- lapply(   imageDirs,   list.files,   pattern = \"tif\",   full.names = TRUE )  # Read files with readImage from EBImage images <- lapply(files, EBImage::readImage, as.is = TRUE)  # Convert to cytoImageList images <- cytomapper::CytoImageList(images) mcols(images)$imageID <- names(images)"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"segmentation","dir":"Articles","previous_headings":"","what":"Segmentation","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"simpleSeg accepts Image, list Image’s, CytoImageList input generates CytoImageList masks output. use histone H3 channel image nuclei marker segmentation. default, simpleseg isolate individual nuclei watershedding using combination intensity marker distance map. Nuclei dilated 3 pixels capture cytoplasm. user may also specify simple image transformations using transform argument.","code":"masks <- simpleSeg::simpleSeg(images,                               nucleus = \"HH3\",                               transform = \"sqrt\")"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"visualise-separation","dir":"Articles","previous_headings":"Segmentation","what":"Visualise separation","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"display colorLabels functions EBImage make easy examine performance cell segmentation. great thing display used interactive session easy zoom image.","code":"# Visualise segmentation performance one way. EBImage::display(colorLabels(masks[[1]]))"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"visualise-outlines","dir":"Articles","previous_headings":"Segmentation","what":"Visualise outlines","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"plotPixels function cytomapper make easy overlay masks top intensities 6 markers. can see segmentation appears performing reasonably.","code":"# Visualise segmentation performance another way. cytomapper::plotPixels(image = images[1],                         mask = masks[1],                         img_id = \"imageID\",                         colour_by = c(\"PanKRT\", \"GLUT1\", \"HH3\", \"CD3\", \"CD20\"),                         display = \"single\",                        colour = list(HH3 = c(\"black\",\"blue\"),                                       CD3 = c(\"black\",\"purple\"),                                      CD20 = c(\"black\",\"green\"),                                      GLUT1 = c(\"black\", \"red\"),                                      PanKRT = c(\"black\", \"yellow\")),                        bcg = list(HH3 = c(0, 1, 1.5),                                       CD3 = c(0, 1, 1.5),                                      CD20 = c(0, 1, 1.5),                                      GLUT1 = c(0, 1, 1.5),                                      PanKRT = c(0, 1, 1.5)),                        legend = NULL)"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"methods-of-watershedding","dir":"Articles","previous_headings":"Segmentation","what":"Methods of Watershedding","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"Watershedding method treats images topographical maps order identify individual objects borders . user may specify watershedding performed using watershed argument simpleSeg.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"methods-of-cell-body-identification","dir":"Articles","previous_headings":"Segmentation","what":"Methods of cell body identification","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"cell body can also identified simpleSeg using models varying complexity, specified cellBody argument.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"parallel-processing","dir":"Articles","previous_headings":"Segmentation","what":"Parallel Processing","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"simpleSeg also supports parallel processing, cores argument used specify many cores used.","code":"masks <- simpleSeg::simpleSeg(images,                               nucleus = \"HH3\",                               cores = 1)"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"summarise-cell-features","dir":"Articles","previous_headings":"","what":"Summarise cell features","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"order characterise phenotypes segmented cells, measureObjects cytomapper calculate average intensity channel within cell well morphological features. channel intensities stored counts assay SingleCellExperiment. Information spatial location cell stored colData m.cx m.cy columns. addition , propagate information store mcols CytoImageList colData resulting SingleCellExperiment.","code":"cellSCE <- cytomapper::measureObjects(masks, images, img_id = \"imageID\")"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"normalising-cells","dir":"Articles","previous_headings":"","what":"Normalising cells","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"cellular features extracted SingleCellExperement dataframe, features may normalised using normalizeCellsfunction, transformed number transformations (e.g., asinh, sqrt) normalisation methods. mean(Divides marker cellular marker intensities mean), minMax (Subtracts minimum value scales markers 0 1.), trim99 (Sets highest 1% values value 99th percentile.), PC1 (Removes 1st principal component) can performed one call function, order specified user.","code":"# Transform and normalise the marker expression of each cell type. # Use a square root transform, then trimmed the 99 quantile  cellSCE <- normalizeCells(cellSCE,                           assayIn = \"counts\",                           assayOut = \"norm\",                           imageID = \"imageID\",                           transformation = \"sqrt\",                           method = c(\"trim99\", \"minMax\"))"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"qc-normalisation","dir":"Articles","previous_headings":"Normalising cells","what":"QC normalisation","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"check see marker intensities cell require form transformation normalisation. extract intensities counts assay. Looking PanKRT expressed majority tumour cells, intensities clearly skewed.  can see normalised data stored norm assay appears bimodal, perfect, likely sufficient clustering.","code":"# Extract marker data and bind with information about images df <- as.data.frame(cbind(colData(cellSCE), t(assay(cellSCE, \"counts\"))))  # Plots densities of PanKRT for each image. ggplot(df, aes(x = PanKRT, colour = imageID)) +    geom_density() +    labs(x = \"PanKRT expression\") +   theme_minimal() # Extract normalised marker information. df <- as.data.frame(cbind(colData(cellSCE), t(assay(cellSCE, \"norm\"))))  # Plots densities of normalised PanKRT for each image. ggplot(df, aes(x = PanKRT, colour = imageID)) +    geom_density() +    labs(x = \"PanKRT expression\") +   theme_minimal()"},{"path":"https://sydneybiox.github.io/simpleSeg/articles/simpleSeg.html","id":"session-info","dir":"Articles","previous_headings":"Normalising cells","what":"Session Info","title":"Segmenting and normalizing multiplexed imaging data with simpleSeg","text":"","code":"sessionInfo() #> R version 4.3.1 (2023-06-16) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Debian GNU/Linux 12 (bookworm) #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.21.so;  LAPACK version 3.11.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: Australia/Sydney #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] cytomapper_1.13.0           SingleCellExperiment_1.23.0 #>  [3] SummarizedExperiment_1.31.1 Biobase_2.61.0              #>  [5] GenomicRanges_1.53.1        GenomeInfoDb_1.37.2         #>  [7] IRanges_2.35.2              S4Vectors_0.39.1            #>  [9] BiocGenerics_0.47.0         MatrixGenerics_1.13.1       #> [11] matrixStats_1.0.0           EBImage_4.43.0              #> [13] ggplot2_3.4.2               simpleSeg_1.1.2             #> [15] BiocStyle_2.29.1            #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3        jsonlite_1.8.7            #>   [3] magrittr_2.0.3            spatstat.utils_3.0-3      #>   [5] ggbeeswarm_0.7.2          magick_2.7.4              #>   [7] farver_2.1.1              rmarkdown_2.23            #>   [9] fs_1.6.3                  zlibbioc_1.47.0           #>  [11] ragg_1.2.5                vctrs_0.6.3               #>  [13] memoise_2.0.1             DelayedMatrixStats_1.23.0 #>  [15] RCurl_1.98-1.12           terra_1.7-39              #>  [17] svgPanZoom_0.3.4          htmltools_0.5.5           #>  [19] S4Arrays_1.1.5            raster_3.6-23             #>  [21] Rhdf5lib_1.23.0           SparseArray_1.1.11        #>  [23] rhdf5_2.45.1              sass_0.4.7                #>  [25] bslib_0.5.0               htmlwidgets_1.6.2         #>  [27] desc_1.4.2                cachem_1.0.8              #>  [29] mime_0.12                 lifecycle_1.0.3           #>  [31] pkgconfig_2.0.3           Matrix_1.5-3              #>  [33] R6_2.5.1                  fastmap_1.1.1             #>  [35] GenomeInfoDbData_1.2.10   shiny_1.7.4.1             #>  [37] digest_0.6.33             colorspace_2.1-0          #>  [39] rprojroot_2.0.3           dqrng_0.3.0               #>  [41] textshaping_0.3.6         beachmat_2.17.14          #>  [43] labeling_0.4.2            fansi_1.0.4               #>  [45] nnls_1.4                  polyclip_1.10-4           #>  [47] abind_1.4-5               compiler_4.3.1            #>  [49] withr_2.5.0               tiff_0.1-11               #>  [51] BiocParallel_1.35.3       viridis_0.6.4             #>  [53] highr_0.10                HDF5Array_1.29.3          #>  [55] R.utils_2.12.2            DelayedArray_0.27.10      #>  [57] rjson_0.2.21              tools_4.3.1               #>  [59] vipor_0.4.5               beeswarm_0.4.0            #>  [61] httpuv_1.6.11             R.oo_1.25.0               #>  [63] glue_1.6.2                rhdf5filters_1.13.5       #>  [65] promises_1.2.0.1          grid_4.3.1                #>  [67] generics_0.1.3            gtable_0.3.3              #>  [69] spatstat.data_3.0-1       R.methodsS3_1.8.2         #>  [71] sp_2.0-0                  utf8_1.2.3                #>  [73] XVector_0.41.1            spatstat.geom_3.2-4       #>  [75] pillar_1.9.0              stringr_1.5.0             #>  [77] limma_3.57.7              later_1.3.1               #>  [79] dplyr_1.1.2               lattice_0.21-8            #>  [81] deldir_1.0-9              tidyselect_1.2.0          #>  [83] locfit_1.5-9.8            scuttle_1.11.2            #>  [85] knitr_1.43                gridExtra_2.3             #>  [87] bookdown_0.34             edgeR_3.43.8              #>  [89] svglite_2.1.1             xfun_0.39                 #>  [91] shinydashboard_0.7.2      statmod_1.5.0             #>  [93] DropletUtils_1.21.0       stringi_1.7.12            #>  [95] fftwtools_0.9-11          yaml_2.3.7                #>  [97] evaluate_0.21             codetools_0.2-19          #>  [99] tibble_3.2.1              BiocManager_1.30.21.1     #> [101] cli_3.6.1                 xtable_1.8-4              #> [103] systemfonts_1.0.4         munsell_0.5.0             #> [105] jquerylib_0.1.4           Rcpp_1.0.11               #> [107] png_0.1-8                 parallel_4.3.1            #> [109] ellipsis_0.3.2            pkgdown_2.0.7             #> [111] jpeg_0.1-10               sparseMatrixStats_1.13.0  #> [113] bitops_1.0-7              SpatialExperiment_1.11.0  #> [115] viridisLite_0.4.2         scales_1.2.1              #> [117] purrr_1.0.1               crayon_1.5.2              #> [119] rlang_1.1.1"},{"path":"https://sydneybiox.github.io/simpleSeg/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Canete. Author. Alexander Nicholls. Author. Ellis Patrick. Author, maintainer.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Canete N, Nicholls , Patrick E (2023). simpleSeg: package perform simple cell segmentation. https://sydneybiox.github.io/simpleSeg/ https://github.com/SydneyBioX/simpleSeg.","code":"@Manual{,   title = {simpleSeg: A package to perform simple cell segmentation},   author = {Nicolas Canete and Alexander Nicholls and Ellis Patrick},   year = {2023},   note = {https://sydneybiox.github.io/simpleSeg/ https://github.com/SydneyBioX/simpleSeg}, }"},{"path":[]},{"path":"https://sydneybiox.github.io/simpleSeg/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"A package to perform simple cell segmentation","text":"simpleSeg provides structured pipeline segmentation cellular tiff stacks normalization features, priming cells classification / clustering. brief preview simpleSeg can found , integration analysis explained detail .","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A package to perform simple cell segmentation","text":"Install package Bioconductor. Otherwise, install development version Github.","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"simpleSeg\") # Install the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"SydneyBioX/simpleSeg\") library(simpleSeg)"},{"path":"https://sydneybiox.github.io/simpleSeg/index.html","id":"installation-problems","dir":"","previous_headings":"Installation","what":"Installation Problems","title":"A package to perform simple cell segmentation","text":"Usually caused non-R dependencies unavailable. Ensure following packages installed system.","code":"fftw, gdal, fortran, arrow"},{"path":"https://sydneybiox.github.io/simpleSeg/index.html","id":"submitting-an-issue-or-feature-request","dir":"","previous_headings":"Installation","what":"Submitting an issue or feature request","title":"A package to perform simple cell segmentation","text":"simpleSeg still active development. greatly appreciate feedback related package. R package related issues raised . general questions feedback, please contact us directly via ellis.patrick@sydney.edu.au.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"A package to perform simple cell segmentation","text":"Alexander Nicholls Ellis Patrick - @TheEllisPatrick Nicolas Canete","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/generateBPParam.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to generate BPPARM object. — generateBPParam","title":"Utility function to generate BPPARM object. — generateBPParam","text":"Utility function generate BPPARM object.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/generateBPParam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to generate BPPARM object. — generateBPParam","text":"","code":"generateBPParam(cores = 1)"},{"path":"https://sydneybiox.github.io/simpleSeg/reference/generateBPParam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to generate BPPARM object. — generateBPParam","text":"cores Desired number cores BPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/generateBPParam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility function to generate BPPARM object. — generateBPParam","text":"BPPPARAM object.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/normalizeCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalizes and transforms cell data in preparation for clustering\n(accepts dataframe, SingleCellExperiment and SpatialExperiment). — normalizeCells","title":"Normalizes and transforms cell data in preparation for clustering\n(accepts dataframe, SingleCellExperiment and SpatialExperiment). — normalizeCells","text":"Normalizes transforms cell data preparation clustering (accepts dataframe, SingleCellExperiment SpatialExperiment).","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/normalizeCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalizes and transforms cell data in preparation for clustering\n(accepts dataframe, SingleCellExperiment and SpatialExperiment). — normalizeCells","text":"","code":"normalizeCells(   cells,   markers = NULL,   assayIn = NULL,   assayOut = \"norm\",   imageID = \"imageID\",   transformation = NULL,   method = NULL,   cores = 1 )"},{"path":"https://sydneybiox.github.io/simpleSeg/reference/normalizeCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalizes and transforms cell data in preparation for clustering\n(accepts dataframe, SingleCellExperiment and SpatialExperiment). — normalizeCells","text":"cells Dataframe SingleCellExperiment SpatialExperiment containing cells features normalized/transformed markers list containing names cell markers normalized /transformed. assayIn input SingleCellExperiment SpatialExperiment multiple assays, specify assay normalized /transformed. assayOut input SingleCellExperiment SpatialExperiment, new normalized data. imageID input SingleCellExperiment SpatialExperiment, name image ID variable order stratify. cells correctly transformation transformation/s performed, default NULL, accepted values: 'asinh' 'sqrt'. method normalization method/s performed, default NULL, accepted values: 'mean', 'minMax', 'trim99', 'PC1'. cores number cores parallel processing.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/normalizeCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalizes and transforms cell data in preparation for clustering\n(accepts dataframe, SingleCellExperiment and SpatialExperiment). — normalizeCells","text":"returns dataframe individual cells rows features         columns.","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/normalizeCells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalizes and transforms cell data in preparation for clustering\n(accepts dataframe, SingleCellExperiment and SpatialExperiment). — normalizeCells","text":"","code":"library(cytomapper) #> Loading required package: EBImage #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #>  #> Attaching package: ‘IRanges’ #> The following objects are masked from ‘package:EBImage’: #>  #>     resize, tile #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians #> The following object is masked from ‘package:EBImage’: #>  #>     channel #>  #> Attaching package: ‘cytomapper’ #> The following objects are masked from ‘package:Biobase’: #>  #>     channelNames, channelNames<- data(\"pancreasSCE\") cells.normalized <- normalizeCells(   cells = pancreasSCE,   markers = c(\"CD99\", \"PIN\", \"CD8a\", \"CDH\"),   assayIn = \"counts\",   assayOut = \"normCounts\",   imageID = \"ImageNb\",   transformation = \"asinh\",   method = \"trim99\" )"},{"path":"https://sydneybiox.github.io/simpleSeg/reference/simpleSeg.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform simple segmentation of multiplexed cellular images — simpleSeg","title":"Perform simple segmentation of multiplexed cellular images — simpleSeg","text":"Perform simple segmentation multiplexed cellular images","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/simpleSeg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform simple segmentation of multiplexed cellular images — simpleSeg","text":"","code":"simpleSeg(   image,   nucleus,   cellBody = \"dilate\",   sizeSelection = 10,   smooth = 1,   transform = NULL,   watershed = \"combine\",   tolerance = NULL,   ext = 1,   discSize = 3,   tissue = NULL,   pca = FALSE,   cores = 1 )"},{"path":"https://sydneybiox.github.io/simpleSeg/reference/simpleSeg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform simple segmentation of multiplexed cellular images — simpleSeg","text":"image image list images CytoImageList read function. nucleus marker list markers corresponding nuclei. cellBody Method cytoplasm identification. Can 'none', dilate', 'discModel' name dedicated cytoplasm marker sizeSelection Minimum pixels object recognized cell noise. smooth amount Gaussian smoothing applied image/s transform transformation list transformations normalizations performed prior nuclei cytoplasm identification. Accepted vales: \"sqrt\", \"asinh\", \"norm99\", \"maxThresh\" \"tissueMask\". Tissue mask may used sample take entirety image (typically circular sample inside image. tissue mask specified background noise present outside sample area removed). watershed Method used perform watersheding. Accepted values: \"distance\" \"combine\". tolerance minimum height object units image intensity highest point (seed) point contacts another object (checked every contact pixel). height smaller tolerance, object combined one neighbors, highest. Tolerance chosen according range x. Default value 1, reasonable value x comes distmap. ext Radius neighborhood pixels detection neighboring objects. Higher value smooths small objects. discSize size dilation around nuclei create cell disc capture cytoplasm tissue Channels used create tissue mask specified transforms. pca Whether run PCA aggregated nucleus markers order detect cellular nucclei. cores number cores parallel processing BPPARAM object","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/simpleSeg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform simple segmentation of multiplexed cellular images — simpleSeg","text":"list image masks","code":""},{"path":"https://sydneybiox.github.io/simpleSeg/reference/simpleSeg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform simple segmentation of multiplexed cellular images — simpleSeg","text":"","code":"library(cytomapper) data(\"pancreasImages\") masks <- simpleSeg(pancreasImages,   nucleus = \"H3\",   cellBody = \"discModel\",   sizeSelection = 8,   smooth = 1.2,   transform = \"sqrt\",   watershed = \"combine\",   tolerance = 1, ext = 1,   discSize = 3,   cores = 5 )"}]
